{"version":3,"sources":["webpack://flexible-gatsby/./src/templates/PostListTemplate.js"],"names":["BlogListTemplate","render","posts","this","props","data","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","map","node","className","key","fields","slug","frontmatter","img","childImageSharp","fluid","to","style","backgroundImage","src","title","excerpt","date","timeToRead","role","rel","React"],"mappings":"0KAKMA,E,6FACJC,OAAA,WACE,IACMC,EADWC,KAAKC,MAAdC,KACWC,kBAAkBC,MACrC,EAAkCJ,KAAKC,MAAMI,YAArCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGK,WAC3DC,GAAYN,EAAc,GAAGK,WACnC,OACE,gBAAC,IAAD,KACGZ,EAAMc,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OACE,2BAASC,UAAU,OAAOC,IAAKF,EAAKG,OAAOC,MACxCJ,EAAKK,YAAYC,KAChBN,EAAKK,YAAYC,IAAIC,iBACrBP,EAAKK,YAAYC,IAAIC,gBAAgBC,OACnC,gBAAC,KAAD,CACEC,GAAIT,EAAKG,OAAOC,KAChBH,UAAU,iBACVS,MAAO,CACLC,gBAAgB,OAAQX,EAAKK,YAAYC,IAAIC,gBAAgBC,MAAMI,IAApD,OAIvB,uBAAKX,UAAU,gBACb,sBAAIA,UAAU,cACZ,gBAAC,KAAD,CAAMQ,GAAIT,EAAKG,OAAOC,MAAOJ,EAAKK,YAAYQ,QAEhD,yBAAIb,EAAKc,SACT,wBAAMb,UAAU,aACbD,EAAKK,YAAYU,KADpB,QAGA,wBAAMd,UAAU,cACbD,EAAKgB,WADR,qBAQR,uBAAKf,UAAU,wBACb,uBAAKA,UAAU,aAAagB,KAAK,cAC/B,2BACIvB,GACA,yBACE,gBAAC,KAAD,CAAMe,GAAIb,EAAUsB,IAAI,OAAOjB,UAAU,eAAzC,oBAKJ,yBACE,wBAAMA,UAAU,eAAhB,QACQT,EADR,OACyBC,KAGzBE,GACA,yBACE,gBAAC,KAAD,CAAMc,GAAIX,EAAUoB,IAAI,OAAOjB,UAAU,eAAzC,qB,GA1DakB,aAuE/B","file":"component---src-templates-post-list-template-js-f45e54614a8a5d2a69cf.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\n\nclass BlogListTemplate extends React.Component {\n  render() {\n    const { data } = this.props\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n    const nextPage = (currentPage + 1).toString()\n    return (\n      <Layout>\n        {posts.map(({ node }) => {\n          return (\n            <article className=\"post\" key={node.fields.slug}>\n              {node.frontmatter.img &&\n                node.frontmatter.img.childImageSharp &&\n                node.frontmatter.img.childImageSharp.fluid && (\n                  <Link\n                    to={node.fields.slug}\n                    className=\"post-thumbnail\"\n                    style={{\n                      backgroundImage: `url(${node.frontmatter.img.childImageSharp.fluid.src})`,\n                    }}\n                  />\n                )}\n              <div className=\"post-content\">\n                <h2 className=\"post-title\">\n                  <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n                </h2>\n                <p>{node.excerpt}</p>\n                <span className=\"post-date\">\n                  {node.frontmatter.date}&nbsp;&nbsp;—&nbsp;\n                </span>\n                <span className=\"post-words\">\n                  {node.timeToRead} minute read\n                </span>\n              </div>\n            </article>\n          )\n        })}\n\n        <div className=\"pagination-container\">\n          <nav className=\"pagination\" role=\"pagination\">\n            <ul>\n              {!isFirst && (\n                <p>\n                  <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\n                    ← Previous Page\n                  </Link>\n                </p>\n              )}\n              <p>\n                <span className=\"page-number\">\n                  Page {currentPage} of {numPages}\n                </span>\n              </p>\n              {!isLast && (\n                <p>\n                  <Link to={nextPage} rel=\"next\" className=\"older-posts\">\n                    Next Page →\n                  </Link>\n                </p>\n              )}\n            </ul>\n          </nav>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogListTemplate\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 160)\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"YYYY, MMM DD\")\n            title\n          }\n        }\n      }\n    }\n    categoryGroup: allMarkdownRemark(limit: 10) {\n      group(field: frontmatter___subCategory) {\n        category: fieldValue\n      }\n    }\n  }\n`\n"],"sourceRoot":""}